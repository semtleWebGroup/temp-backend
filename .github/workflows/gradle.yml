name: github-action-test CI

on:
  push:
    branches:
      - 'develop'
      - 'main'
  pull_request:
    branches:
      - 'develop'
      - 'main'

permissions: write-all

jobs:
  build:
    runs-on: ubuntu-latest # 실행 환경 지정

    steps:
      - uses: actions/checkout@v2 # github action 버전 지정(major version)

#      - name: Set up JDK 11 # JAVA 버전 지정
#        uses: actions/setup-java@v1
#        with:
#          java-version: 11

#      - name: Grant execute permission for gradlew
#        run: chmod +x gradlew
      # 빌드 파일이 저장될 경로를 만듭니다.
      - name: build path mkdir
        run: mkdir -p build/libs/

      # 전에 빌드된 파일이 있으면 삭제해서 초기화합니다.
      - name: Delete file
        run: rm -rf ./build/libs/*

      # jar 을 빌드합니다
      - name: Execute bootJar
        run: ./gradlew bootJar

      # 도커 파일을 통해 테스트 환경을 빌드합니다.
      - name: Build image From Dockerfile
        run: docker build -t test_environment .

      # 도커 환경에서 빌드 테스트를 진행합니다.
      - name: Build with Gradle
        run: docker run --rm --name te -ti -v $PWD:/src:rw --entrypoint="" test_environment bash -c "cd src && ./gradlew build -x test"
#        run: ./gradlew build -x test

      - name: Test with Gradle # test application build
        run: docker run --rm --name te -ti -v $PWD:/src:rw --entrypoint="" test_environment bash -c "cd src && ./gradlew test"
      #        run: ./gradlew test

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2.6.1
        if: ${{ always() }}  # 테스트가 실패하여도 Report를 보기 위해 `always`로 설정
        with:
          files: build/test-results/**/*.xml
